"using experimental module loading in node
autocmd BufNewFile,BufRead *.mjs setfiletype javascript

"Vim Tmux Navigator
Plugin 'christoomey/vim-tmux-navigator'

"Vim Linting Autoformatter
Plugin 'millermedeiros/vim-esformatter'

nnoremap <silent> <leader>fe :Esformatter<CR>
vnoremap <silent> <leader>fe :EsformatterVisual<CR>

"Vim Autoclose html
Plugin 'alvan/vim-closetag'

" autoclose filenames
let g:closetag_filenames = "*.html,*.jsx,*.xhtml,*.phtml,*.js"

"Vim Linting
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_args="--ext .js,.jsx"
" only use local eslint (comment out to use global lint)
let g:syntastic_javascript_eslint_exe = 'npm run lint --'

"let g:syntastic_error_symbol = '‚ùå'
"let g:syntastic_style_error_symbol = '‚ÅâÔ∏è'
"let g:syntastic_warning_symbol = '‚ö†Ô∏è'
"let g:syntastic_style_warning_symbol = 'üí©'
" Start syntastic in debug mode (use :mes to get output)
"let g:syntastic_debug = 3

highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn

" vim-airline configuration
" symbols ÓÇ∞, ÓÇ±, ÓÇ≤, ÓÇ≥, ÓÇ†, ÓÇ¢, and ÓÇ°
let g:airline#extensions#bufferline#enabled = 0
let g:airline_theme = 'seoul256'
let g:airline_left_sep='ÓÇ∞'
let g:airline_right_sep='ÓÇ≤'

call airline#parts#define_accent('syntastic', 'red')
call airline#parts#define_accent('whitespace', 'red')

let g:airline_section_a = airline#section#create(['mode'])
let g:airline_section_y = airline#section#create(['%L'])
let g:airline#extensions#default#section_truncate_width = { 'x': 30, 'y': 30 }
let g:airline#extensions#default#layout = [
  \ ['a', 'c'],
  \ ['x', 'y']
  \ ]
let g:airline_mode_map = {
  \ '__' : '-',
  \ 'n'  : 'N',
  \ 'i'  : 'I',
  \ 'R'  : 'R',
  \ 'c'  : 'C',
  \ 'v'  : 'V',
  \ 'V'  : 'V',
  \ '' : 'V',
  \ 's'  : 'S',
  \ 'S'  : 'S',
  \ '' : 'S',
  \ }

" Map , to leader
let mapleader = ","

" Map jj to <Esc>
:inoremap jj <Esc>

" Use ; as :
nnoremap ; :

" Map comma space to unhighlight
nnoremap <leader><space> :noh<cr>

" Indent every line in the file with <leader>i
nnoremap <Leader>i mmgg=G`m

" Function to removes trailing spaces
function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction

" Remove trailing spaces on file write, append, buffwrite, and more
autocmd FileWritePre    * :call TrimWhiteSpace()
autocmd FileAppendPre   * :call TrimWhiteSpace()
autocmd FilterWritePre  * :call TrimWhiteSpace()
autocmd BufWritePre     * :call TrimWhiteSpace()

" Set tabs to 2 spaces
set shiftwidth=2
set tabstop=2
set softtabstop=2

" Don't close NERDTree when opening a file
let NERDTreeQuitOnOpen=0

" Make solarized work properly with iTerm2 when using solarized scheme
"syntax enable
"let g:solarized_termcolors=16
"color solarized

"" Set textwidth to 80 and colorcolumn to textwidth+1 so that text will wrap
set textwidth=80
set colorcolumn=+1

"Leon's color scheme (comment out solarized)
"Plugin 'poetic-labs/pastelesque'
"colorscheme pastelesque

"Seoul Color scheme
"Plugin 'junegunn/seoul256.vim'
let g:seoul256_background = 236
color seoul256

"Light scheme (change color scheme to light background)
"set background=light

"React specific ------------
Plugin 'mxw/vim-jsx'

"Async lint
Plugin 'w0rp/ale'

let g:ale_sign_error = '‚óè' "Less aggressive than the default '>>'
let g:ale_sign_warning = '.'
let g:ale_lint_on_enter = 0 "Less distracting when opening a new file
